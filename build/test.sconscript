import os, os.path
import re
import glob
from build import create_objs

Import('common_files')
test_files=  ['test.c']

test_libs = ['libcheck']
lib_path = ['/usr/lib', '/usr/local/lib']

# Generate the tests
test_headers = [os.path.split(g)[1] for g in glob.glob("../test/test_*.h")]
test_names = [h.replace("test_", "").replace(".h", "") for h in test_headers]

print "Test names:"
print test_names

include_files = [os.path.split(g)[1] for g in glob.glob("../src/*.h")]
print "Include files:"
print include_files

test_script = """#include <stdio.h>
#include <stdlib.h>
#include <check.h>

"""

for i in include_files:
    test_script += "#include \"%s\"\n" % i
test_script += "\n"

for n in test_names:
    test_script += "#include \"test_%s.h\"\n" % n
test_script += "\n"

for th, tn in zip(test_headers, test_names):
    with open("../test/" + th) as test_file:
        tests = re.findall("START_TEST\((.*)\)", test_file.read())
    test_script += "Suite* %s_suite(void)\n" % tn
    test_script += "{\n"
    test_script += "\tSuite* s = suite_create(\"%s\");\n" % tn
    test_script += "\tTCase* tc_core = tcase_create(\"Core\");\n"
    for t in tests:
        test_script += "\ttcase_add_test(tc_core, %s);\n" % t
    test_script += "\tsuite_add_tcase(s, tc_core);\n"
    test_script += "\treturn s;\n"
    test_script += "}\n\n"

test_script += "int main(void)\n"
test_script += "{\n"
test_script += "\tint numFailed = 0;\n"
test_script += "\tSRunner* sr = srunner_create(NULL);\n"
for tn in test_names:
    test_script += "\tsrunner_add_suite(sr, %s_suite());\n" % tn
test_script += "\tsrunner_run_all(sr, CK_NORMAL);\n"
test_script += "\tnumFailed = srunner_ntests_failed(sr);\n"
test_script += "\tsrunner_free(sr);\n"
test_script += "\treturn (numFailed == 0) ? EXIT_SUCCESS : EXIT_FAILURE;\n"
test_script += "}\n"

with open("../test/test.c", "w") as test_main:
    test_main.write(test_script)

test_env = Environment(CCFLAGS='-std=c99', CPPPATH="#src")
test_conf = Configure(test_env)

test_env.VariantDir(variant_dir='#obj/test', src_dir='#test', duplicate=False)
test_env.VariantDir(variant_dir='#obj/test_main', src_dir='#src', duplicate=False)

test_build = ['#obj/test/' + p for p in test_files] +\
             ['#obj/test_main/' + p for p in common_files]

if test_conf.CheckLibWithHeader('check', 'check.h', 'c'):
    test_env.Program(target='#bin/test_suite', source=create_objs(test_env, test_build),
            LIBS=test_libs, LIBPATH=lib_path)
